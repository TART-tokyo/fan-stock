@startuml

class "TokenFactory" as factory {
    totalTokenCount()
    Get created token count
    --
    tokenOf(id)
    Get token address by index
    --
    tokenAmountOf(address)
    get token amount of creator
    --
    creatorTokenOf(creator, id)
    get a creator token of specific id
    --
    createToken(creator, name, symbol, totalSupply, decimals, ratio, isTotalSupplyFixed, lockupPeriod, enableStakeToToken)
    Create new creator token, and then transfer tokens to owner and vesting contract
}

class "ABCToken" as abc {
    inherit:
    - ERC20
    --
    Sample creator token created by FanStockManager.
    Multiple creator tokens are created actually.
    --
    name
    Token name
    --
    symbol
    Token symbol
    --
    int8 decimals
    --
    totalSupply()
}

class "TokenPool" as pool {
    earned(account, token)
    Get available new token amount to claim
    --
    stake(amount, token)
    --
    withdraw(amount, token)
    --
    claim(token)
}

class "Vesting" as vest {
    recipients
    Addresses for redeem recipient(currently only creator address)
    --
    recipientOf(token)
    Get recipient of token
    --
    redeem()
    Redeem available tokens for recipient
}

factory -down-> abc
abc -down-> pool: Stake tokens by user
abc -down-> vest: Transferred by platform to vest tokens for creator

@enduml
