/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Claimed = ContractEventLog<{
  campaignId: string;
  index: string;
  account: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface IMerkleDistributorManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IMerkleDistributorManager;
  clone(): IMerkleDistributorManager;
  methods: {
    distributionMap(
      arg0: number | string | BN
    ): NonPayableTransactionObject<{
      token: string;
      merkleRoot: string;
      remainingAmount: string;
      0: string;
      1: string;
      2: string;
    }>;

    nextCampaignId(): NonPayableTransactionObject<string>;

    token(
      campaignId: number | string | BN
    ): NonPayableTransactionObject<string>;

    merkleRoot(
      campaignId: number | string | BN
    ): NonPayableTransactionObject<string>;

    remainingAmount(
      campaignId: number | string | BN
    ): NonPayableTransactionObject<string>;

    isClaimed(
      campaignId: number | string | BN,
      index: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    addDistribution(
      token: string,
      merkleRoot: string | number[],
      allowance: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Claimed(cb?: Callback<Claimed>): EventEmitter;
    Claimed(options?: EventOptions, cb?: Callback<Claimed>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Claimed", cb: Callback<Claimed>): void;
  once(event: "Claimed", options: EventOptions, cb: Callback<Claimed>): void;
}
