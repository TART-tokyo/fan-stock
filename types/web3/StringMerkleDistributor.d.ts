/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Claimed = ContractEventLog<{
  index: string;
  account: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface StringMerkleDistributor extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): StringMerkleDistributor;
  clone(): StringMerkleDistributor;
  methods: {
    merkleRoot(): NonPayableTransactionObject<string>;

    token(): NonPayableTransactionObject<string>;

    isClaimed(index: number | string): NonPayableTransactionObject<boolean>;

    claim(
      index: number | string,
      target: string,
      amount: number | string,
      merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Claimed(cb?: Callback<Claimed>): EventEmitter;
    Claimed(options?: EventOptions, cb?: Callback<Claimed>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Claimed", cb: Callback<Claimed>): void;
  once(event: "Claimed", options: EventOptions, cb: Callback<Claimed>): void;
}
