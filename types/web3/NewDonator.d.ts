/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Donate = ContractEventLog<{
  from: string;
  to: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface NewDonator extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): NewDonator;
  clone(): NewDonator;
  methods: {
    tokenDonateeList(arg0: string): NonPayableTransactionObject<string>;

    setDonatee(_token: string): NonPayableTransactionObject<void>;

    donate(
      _token: string,
      _amount: number | string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Donate(cb?: Callback<Donate>): EventEmitter;
    Donate(options?: EventOptions, cb?: Callback<Donate>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Donate", cb: Callback<Donate>): void;
  once(event: "Donate", options: EventOptions, cb: Callback<Donate>): void;
}
