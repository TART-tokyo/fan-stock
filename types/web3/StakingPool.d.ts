/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Stake = ContractEventLog<{
  from: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdraw = ContractEventLog<{
  from: string;
  token: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface StakingPool extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): StakingPool;
  clone(): StakingPool;
  methods: {
    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    registeredTokens(arg0: string): NonPayableTransactionObject<boolean>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    tokensCreator(arg0: string): NonPayableTransactionObject<string>;

    tokensStakingPaused(arg0: string): NonPayableTransactionObject<boolean>;

    tokensTotalSupply(arg0: string): NonPayableTransactionObject<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    balanceOf(
      account: string,
      token: string
    ): NonPayableTransactionObject<string>;

    addStakingList(
      creator: string,
      token: string,
      paused: boolean
    ): NonPayableTransactionObject<void>;

    pauseStakingOf(token: string): NonPayableTransactionObject<void>;

    resumeStakingOf(token: string): NonPayableTransactionObject<void>;

    earned(
      account: string,
      token: string,
      totalSupply: number | string,
      decimals: number | string
    ): NonPayableTransactionObject<string>;

    stake(
      amount: number | string,
      token: string
    ): NonPayableTransactionObject<void>;

    withdraw(
      amount: number | string,
      token: string
    ): NonPayableTransactionObject<void>;

    claim(token: string): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Stake(cb?: Callback<Stake>): EventEmitter;
    Stake(options?: EventOptions, cb?: Callback<Stake>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Stake", cb: Callback<Stake>): void;
  once(event: "Stake", options: EventOptions, cb: Callback<Stake>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
