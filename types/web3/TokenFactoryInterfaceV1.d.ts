/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CreateToken = ContractEventLog<{
  token: string;
  creator: string;
  0: string;
  1: string;
}>;

export interface TokenFactoryInterfaceV1 extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TokenFactoryInterfaceV1;
  clone(): TokenFactoryInterfaceV1;
  methods: {
    createToken(
      name: string,
      symbol: string,
      donationRatio: number | string | BN
    ): NonPayableTransactionObject<void>;

    createExclusiveToken(
      creator: string,
      name: string,
      symbol: string,
      donationRatio: number | string | BN,
      operationRatio: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    CreateToken(cb?: Callback<CreateToken>): EventEmitter;
    CreateToken(
      options?: EventOptions,
      cb?: Callback<CreateToken>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CreateToken", cb: Callback<CreateToken>): void;
  once(
    event: "CreateToken",
    options: EventOptions,
    cb: Callback<CreateToken>
  ): void;
}
