/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewOwner = ContractEventLog<{
  node: string;
  label: string;
  owner: string;
  0: string;
  1: string;
  2: string;
}>;
export type NewResolver = ContractEventLog<{
  node: string;
  resolver: string;
  0: string;
  1: string;
}>;
export type NewTTL = ContractEventLog<{
  node: string;
  ttl: string;
  0: string;
  1: string;
}>;
export type Transfer = ContractEventLog<{
  node: string;
  owner: string;
  0: string;
  1: string;
}>;

export interface ENSInterface extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ENSInterface;
  clone(): ENSInterface;
  methods: {
    setSubnodeOwner(
      node: string | number[],
      label: string | number[],
      _owner: string
    ): NonPayableTransactionObject<void>;

    setResolver(
      node: string | number[],
      _resolver: string
    ): NonPayableTransactionObject<void>;

    setOwner(
      node: string | number[],
      _owner: string
    ): NonPayableTransactionObject<void>;

    setTTL(
      node: string | number[],
      _ttl: number | string
    ): NonPayableTransactionObject<void>;

    owner(node: string | number[]): NonPayableTransactionObject<string>;

    resolver(node: string | number[]): NonPayableTransactionObject<string>;

    ttl(node: string | number[]): NonPayableTransactionObject<string>;
  };
  events: {
    NewOwner(cb?: Callback<NewOwner>): EventEmitter;
    NewOwner(options?: EventOptions, cb?: Callback<NewOwner>): EventEmitter;

    NewResolver(cb?: Callback<NewResolver>): EventEmitter;
    NewResolver(
      options?: EventOptions,
      cb?: Callback<NewResolver>
    ): EventEmitter;

    NewTTL(cb?: Callback<NewTTL>): EventEmitter;
    NewTTL(options?: EventOptions, cb?: Callback<NewTTL>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewOwner", cb: Callback<NewOwner>): void;
  once(event: "NewOwner", options: EventOptions, cb: Callback<NewOwner>): void;

  once(event: "NewResolver", cb: Callback<NewResolver>): void;
  once(
    event: "NewResolver",
    options: EventOptions,
    cb: Callback<NewResolver>
  ): void;

  once(event: "NewTTL", cb: Callback<NewTTL>): void;
  once(event: "NewTTL", options: EventOptions, cb: Callback<NewTTL>): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
