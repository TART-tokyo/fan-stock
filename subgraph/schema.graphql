type Creator @entity {
  id: ID!
  campaigns: [Campaign!]! @derivedFrom(field: "creator")
}

type Account @entity {
  id: ID!
  claims: [Claim!]! @derivedFrom(field: "account")
}

type Distributor @entity {
  id: ID!
  distributorInfoCid: String
  campaigns: [Campaign!]! @derivedFrom(field: "distributor")
}

type Campaign @entity {
  "Equals to: <distributorAddress>-<campaignId>"
  id: ID!
  distributor: Distributor!
  token: String
  # nft: String # nft token id is same as campaignId(treeId). Future implementation.
  "Campaign creator not only token creator"
  creator: Creator!
  campaignInfoCid: String
  merkleTreeCid: String
  merkleRoot: Bytes
  claimedNum: BigInt
  claims: [Claim!]! @derivedFrom(field: "campaign")
  createdAt: BigInt!
}

type Claim @entity {
  "Equals to: <distributorAddress>-<campaignId>-<accountAddress>"
  id: ID!
  account: Account!
  campaign: Campaign!
  token: String
  nft: String
  amount: BigInt
  createdAt: BigInt!
}

type DevReceiver @entity {
  id: ID!
  author: String!
  propertyToken: ERC20!
  communityToken: ERC20!
}

type ERC20 @entity {
  id: ID!
  name: String
  symbol: String
}
