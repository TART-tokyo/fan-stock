type Creator @entity {
  id: ID!
  campaigns: [Campaign!]! @derivedFrom(field: "creator")
}

type Account @entity {
  id: ID!
  claims: [Claim!]! @derivedFrom(field: "account")
}

type Distributor @entity {
  id: ID!
  distributorInfoCid: String
  campaigns: [Campaign!]! @derivedFrom(field: "distributor")
}

type Campaign @entity {
  id: ID!
  distributor: Distributor!
  token: String!
  "Campaign creator not only token creator"
  creator: Creator!
  campaignInfoCid: String
  merkleTreeCid: String
  merkleRoot: Bytes
  claimedNum: BigInt
  claims: [Claim!]! @derivedFrom(field: "campaign")
}

type Claim @entity {
  " Equals to: <accountAddress>-<campaignId>"
  id: ID!
  account: Account!
  campaign: Campaign!
  token: String!
  amount: BigInt
}

# TODO Add token schema
scalar BigInt
scalar Bytes

input CampaignsCondition {
  token: String!
}

input CheckRequestsCondition {
  account: String!
  campaign: String!
}

type Query {
  account(id: ID!): Account
  creator(id: ID!): Creator
  campaigns(where: CampaignsCondition!): [Campaign!]!
  campaign(id: ID!): Campaign
  distributors: [Distributor!]!
  claim(id: ID!): Claim
}

schema {
  query: Query
}

