/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SingleTreasuryVesterInterface extends ethers.utils.Interface {
  functions: {
    "amount()": FunctionFragment;
    "endAt()": FunctionFragment;
    "owner()": FunctionFragment;
    "recipient()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startedAt()": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatedAt()": FunctionFragment;
    "initialize(address,address,uint256,uint256)": FunctionFragment;
    "redeem()": FunctionFragment;
    "remainingAmount()": FunctionFragment;
    "redeemableAmount()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(functionFragment: "endAt", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "recipient", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startedAt", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updatedAt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remainingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemableAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipient", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startedAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatedAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemableAmount",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class SingleTreasuryVester extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SingleTreasuryVesterInterface;

  functions: {
    amount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "amount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    endAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "endAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    recipient(overrides?: CallOverrides): Promise<[string]>;

    "recipient()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    startedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startedAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "updatedAt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      vestingToken: string,
      vestingRecipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,uint256)"(
      vestingToken: string,
      vestingRecipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeem(overrides?: Overrides): Promise<ContractTransaction>;

    "redeem()"(overrides?: Overrides): Promise<ContractTransaction>;

    remainingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "remainingAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemableAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "redeemableAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  amount(overrides?: CallOverrides): Promise<BigNumber>;

  "amount()"(overrides?: CallOverrides): Promise<BigNumber>;

  endAt(overrides?: CallOverrides): Promise<BigNumber>;

  "endAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  recipient(overrides?: CallOverrides): Promise<string>;

  "recipient()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  startedAt(overrides?: CallOverrides): Promise<BigNumber>;

  "startedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  "updatedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    vestingToken: string,
    vestingRecipient: string,
    vestingStart: BigNumberish,
    vestingYears: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,uint256)"(
    vestingToken: string,
    vestingRecipient: string,
    vestingStart: BigNumberish,
    vestingYears: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeem(overrides?: Overrides): Promise<ContractTransaction>;

  "redeem()"(overrides?: Overrides): Promise<ContractTransaction>;

  remainingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "remainingAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  redeemableAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "redeemableAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    amount(overrides?: CallOverrides): Promise<BigNumber>;

    "amount()"(overrides?: CallOverrides): Promise<BigNumber>;

    endAt(overrides?: CallOverrides): Promise<BigNumber>;

    "endAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    recipient(overrides?: CallOverrides): Promise<string>;

    "recipient()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    startedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "startedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "updatedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      vestingToken: string,
      vestingRecipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,uint256)"(
      vestingToken: string,
      vestingRecipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(overrides?: CallOverrides): Promise<void>;

    "redeem()"(overrides?: CallOverrides): Promise<void>;

    remainingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "remainingAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "redeemableAmount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    amount(overrides?: CallOverrides): Promise<BigNumber>;

    "amount()"(overrides?: CallOverrides): Promise<BigNumber>;

    endAt(overrides?: CallOverrides): Promise<BigNumber>;

    "endAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    recipient(overrides?: CallOverrides): Promise<BigNumber>;

    "recipient()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    startedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "startedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    "updatedAt()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      vestingToken: string,
      vestingRecipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,uint256)"(
      vestingToken: string,
      vestingRecipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeem(overrides?: Overrides): Promise<BigNumber>;

    "redeem()"(overrides?: Overrides): Promise<BigNumber>;

    remainingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "remainingAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "redeemableAmount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    amount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "amount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endAt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "recipient()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    startedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startedAt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "updatedAt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      vestingToken: string,
      vestingRecipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,uint256)"(
      vestingToken: string,
      vestingRecipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeem(overrides?: Overrides): Promise<PopulatedTransaction>;

    "redeem()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    remainingAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "remainingAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemableAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "redeemableAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
