/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { StringMerkleDistributorManager } from "../StringMerkleDistributorManager";

export class StringMerkleDistributorManager__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<StringMerkleDistributorManager> {
    return super.deploy(
      overrides || {}
    ) as Promise<StringMerkleDistributorManager>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StringMerkleDistributorManager {
    return super.attach(address) as StringMerkleDistributorManager;
  }
  connect(signer: Signer): StringMerkleDistributorManager__factory {
    return super.connect(signer) as StringMerkleDistributorManager__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StringMerkleDistributorManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StringMerkleDistributorManager;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "merkleRootMap",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "remainingAmountMap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokenMap",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "campaignId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "campaignId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "target",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061098e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630a9c48041461005c57806328282a211461009e5780634e64c504146101cc578063b19afead1461020e578063f364c90c1461027c575b600080fd5b6100886004803603602081101561007257600080fd5b81019080803590602001909291905050506102cc565b6040518082815260200191505060405180910390f35b6101ca600480360360a08110156100b457600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156100e557600080fd5b8201836020820111156100f757600080fd5b8035906020019184600183028401116401000000008311171561011957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019064010000000081111561018657600080fd5b82018360208201111561019857600080fd5b803590602001918460208302840111640100000000831117156101ba57600080fd5b90919293919293905050506102e4565b005b6101f8600480360360208110156101e257600080fd5b81019080803590602001909291905050506106e6565b6040518082815260200191505060405180910390f35b61023a6004803603602081101561022457600080fd5b81019080803590602001909291905050506106fe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102b26004803603604081101561029257600080fd5b810190808035906020019092919080359060200190929190505050610731565b604051808215151515815260200191505060405180910390f35b60026020528060005260406000206000915090505481565b6102ee8686610731565b15610344576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806108ed6028913960400191505060405180910390fd5b60026000878152602001908152602001600020548311156103b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806108c76026913960400191505060405180910390fd5b60008585856040516020018084815260200183805190602001908083835b602083106103f157805182526020820191506020810190506020830392506103ce565b6001836020036101000a0380198251168184511680821785525050505050509050018281526020019350505050604051602081830303815290604052805190602001209050610495838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600160008a81526020019081526020016000205483610795565b6104ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806109156021913960400191505060405180910390fd5b6104f4878761084d565b60008088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156105ad57600080fd5b505af11580156105c1573d6000803e3d6000fd5b505050506040513d60208110156105d757600080fd5b810190808051906020019092919050505061063d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806109366023913960400191505060405180910390fd5b8360026000898152602001908152602001600020540360026000898152602001908152602001600020819055507f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed026863386604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a150505050505050565b60016020528060005260406000206000915090505481565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610100838161073f57fe5b0490506000610100848161074f57fe5b06905060006003600087815260200190815260200160002060008481526020019081526020016000205490506000826001901b9050808183161494505050505092915050565b60008082905060008090505b855181101561083f5760008682815181106107b857fe5b602002602001015190508083116107ff5782816040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250610831565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b5080806001019150506107a1565b508381149150509392505050565b6000610100828161085a57fe5b0490506000610100838161086a57fe5b069050806001901b6003600086815260200190815260200160002060008481526020019081526020016000205417600360008681526020019081526020016000206000848152602001908152602001600020819055505050505056fe4d65726b6c654469737472696275746f723a20496e73756666696369656e7420746f6b656e2e4d65726b6c654469737472696275746f723a2044726f7020616c726561647920636c61696d65642e4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f662e4d65726b6c654469737472696275746f723a205472616e73666572206661696c65642ea264697066735822122081675865fbf3e3605d1ebff0538ed0ff1760b3d57ad072029acc0f2edd42288164736f6c634300060b0033";
