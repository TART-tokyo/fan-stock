/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { InitializableStringMerkleDistributor } from "../InitializableStringMerkleDistributor";

export class InitializableStringMerkleDistributor__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<InitializableStringMerkleDistributor> {
    return super.deploy(
      overrides || {}
    ) as Promise<InitializableStringMerkleDistributor>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): InitializableStringMerkleDistributor {
    return super.attach(address) as InitializableStringMerkleDistributor;
  }
  connect(signer: Signer): InitializableStringMerkleDistributor__factory {
    return super.connect(
      signer
    ) as InitializableStringMerkleDistributor__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InitializableStringMerkleDistributor {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as InitializableStringMerkleDistributor;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "target",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107a8806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632eb4a7ab146100515780639e34070f1461006f578063b14fb496146100b5578063fc0c546a146101d9575b600080fd5b610059610223565b6040518082815260200191505060405180910390f35b61009b6004803603602081101561008557600080fd5b8101908080359060200190929190505050610229565b604051808215151515815260200191505060405180910390f35b6101d7600480360360808110156100cb57600080fd5b8101908080359060200190929190803590602001906401000000008111156100f257600080fd5b82018360208201111561010457600080fd5b8035906020019184600183028401116401000000008311171561012657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019064010000000081111561019357600080fd5b8201836020820111156101a557600080fd5b803590602001918460208302840111640100000000831117156101c757600080fd5b909192939192939050505061027b565b005b6101e16105c0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60015481565b600080610100838161023757fe5b0490506000610100848161024757fe5b0690506000600260008481526020019081526020016000205490506000826001901b90508081831614945050505050919050565b61028485610229565b156102da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610745602e913960400191505060405180910390fd5b60008585856040516020018084815260200183805190602001908083835b6020831061031b57805182526020820191506020810190506020830392506102f8565b6001836020036101000a03801982511681845116808217855250505050505090500182815260200193505050506040516020818303038152906040528051906020012090506103ae838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600154836105e6565b610403576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806106f56027913960400191505060405180910390fd5b61040c8661069e565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156104b557600080fd5b505af11580156104c9573d6000803e3d6000fd5b505050506040513d60208110156104df57600080fd5b8101908080519060200190929190505050610545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061071c6029913960400191505060405180910390fd5b7f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed026863386604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008082905060008090505b855181101561069057600086828151811061060957fe5b602002602001015190508083116106505782816040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250610682565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b5080806001019150506105f2565b508381149150509392505050565b600061010082816106ab57fe5b049050600061010083816106bb57fe5b069050806001901b600260008481526020019081526020016000205417600260008481526020019081526020016000208190555050505056fe537472696e674d65726b6c654469737472696275746f723a20496e76616c69642070726f6f662e537472696e674d65726b6c654469737472696275746f723a205472616e73666572206661696c65642e537472696e674d65726b6c654469737472696275746f723a2044726f7020616c726561647920636c61696d65642ea2646970667358221220688315bb9729cdf299f97b228b3c3d50e7ba43a3a6a99dd7d6b0bf783f140c8164736f6c634300060b0033";
