/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TreasuryVesterInterfaceV1Interface extends ethers.utils.Interface {
  functions: {
    "addVesting(address,address,uint256,uint256)": FunctionFragment;
    "remainingAmountOf(address)": FunctionFragment;
    "redeemableAmountOf(address)": FunctionFragment;
    "redeem(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addVesting",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingAmountOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemableAmountOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values: [string]): string;

  decodeFunctionResult(functionFragment: "addVesting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingAmountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemableAmountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;

  events: {};
}

export class TreasuryVesterInterfaceV1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreasuryVesterInterfaceV1Interface;

  functions: {
    addVesting(
      token: string,
      recipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addVesting(address,address,uint256,uint256)"(
      token: string,
      recipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    remainingAmountOf(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "remainingAmountOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redeemableAmountOf(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "redeemableAmountOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redeem(token: string, overrides?: Overrides): Promise<ContractTransaction>;

    "redeem(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addVesting(
    token: string,
    recipient: string,
    vestingStart: BigNumberish,
    vestingYears: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addVesting(address,address,uint256,uint256)"(
    token: string,
    recipient: string,
    vestingStart: BigNumberish,
    vestingYears: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  remainingAmountOf(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "remainingAmountOf(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeemableAmountOf(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "redeemableAmountOf(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeem(token: string, overrides?: Overrides): Promise<ContractTransaction>;

  "redeem(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addVesting(
      token: string,
      recipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addVesting(address,address,uint256,uint256)"(
      token: string,
      recipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    remainingAmountOf(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remainingAmountOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemableAmountOf(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemableAmountOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(token: string, overrides?: CallOverrides): Promise<void>;

    "redeem(address)"(token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addVesting(
      token: string,
      recipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addVesting(address,address,uint256,uint256)"(
      token: string,
      recipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    remainingAmountOf(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remainingAmountOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemableAmountOf(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemableAmountOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(token: string, overrides?: Overrides): Promise<BigNumber>;

    "redeem(address)"(token: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addVesting(
      token: string,
      recipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addVesting(address,address,uint256,uint256)"(
      token: string,
      recipient: string,
      vestingStart: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    remainingAmountOf(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "remainingAmountOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemableAmountOf(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "redeemableAmountOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(token: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "redeem(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
