/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IMerkleDistributorManagerInterface extends ethers.utils.Interface {
  functions: {
    "distributionMap(uint64)": FunctionFragment;
    "nextCampaignId()": FunctionFragment;
    "token(uint64)": FunctionFragment;
    "merkleRoot(uint64)": FunctionFragment;
    "remainingAmount(uint64)": FunctionFragment;
    "isClaimed(uint64,uint256)": FunctionFragment;
    "addDistribution(address,bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "distributionMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCampaignId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addDistribution",
    values: [string, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "distributionMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCampaignId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addDistribution",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(uint64,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
}

export class IMerkleDistributorManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMerkleDistributorManagerInterface;

  functions: {
    distributionMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string;
        merkleRoot: string;
        remainingAmount: BigNumber;
      }
    >;

    "distributionMap(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string;
        merkleRoot: string;
        remainingAmount: BigNumber;
      }
    >;

    nextCampaignId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextCampaignId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "token(uint64)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    merkleRoot(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "merkleRoot(uint64)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    remainingAmount(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "remainingAmount(uint64)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isClaimed(
      campaignId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isClaimed(uint64,uint256)"(
      campaignId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addDistribution(
      token: string,
      merkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addDistribution(address,bytes32,uint256)"(
      token: string,
      merkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  distributionMap(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      token: string;
      merkleRoot: string;
      remainingAmount: BigNumber;
    }
  >;

  "distributionMap(uint64)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      token: string;
      merkleRoot: string;
      remainingAmount: BigNumber;
    }
  >;

  nextCampaignId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextCampaignId()"(overrides?: CallOverrides): Promise<BigNumber>;

  token(campaignId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "token(uint64)"(
    campaignId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  merkleRoot(
    campaignId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "merkleRoot(uint64)"(
    campaignId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  remainingAmount(
    campaignId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "remainingAmount(uint64)"(
    campaignId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isClaimed(
    campaignId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isClaimed(uint64,uint256)"(
    campaignId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addDistribution(
    token: string,
    merkleRoot: BytesLike,
    allowance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addDistribution(address,bytes32,uint256)"(
    token: string,
    merkleRoot: BytesLike,
    allowance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    distributionMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string;
        merkleRoot: string;
        remainingAmount: BigNumber;
      }
    >;

    "distributionMap(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string;
        merkleRoot: string;
        remainingAmount: BigNumber;
      }
    >;

    nextCampaignId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextCampaignId()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(campaignId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "token(uint64)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    merkleRoot(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "merkleRoot(uint64)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    remainingAmount(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remainingAmount(uint64)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimed(
      campaignId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isClaimed(uint64,uint256)"(
      campaignId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addDistribution(
      token: string,
      merkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addDistribution(address,bytes32,uint256)"(
      token: string,
      merkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Claimed(
      campaignId: null,
      index: null,
      account: null,
      amount: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        campaignId: BigNumber;
        index: BigNumber;
        account: string;
        amount: BigNumber;
      }
    >;
  };

  estimateGas: {
    distributionMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributionMap(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextCampaignId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextCampaignId()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "token(uint64)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoot(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "merkleRoot(uint64)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remainingAmount(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remainingAmount(uint64)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimed(
      campaignId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isClaimed(uint64,uint256)"(
      campaignId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addDistribution(
      token: string,
      merkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addDistribution(address,bytes32,uint256)"(
      token: string,
      merkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    distributionMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributionMap(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextCampaignId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextCampaignId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "token(uint64)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoot(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "merkleRoot(uint64)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remainingAmount(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "remainingAmount(uint64)"(
      campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClaimed(
      campaignId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isClaimed(uint64,uint256)"(
      campaignId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addDistribution(
      token: string,
      merkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addDistribution(address,bytes32,uint256)"(
      token: string,
      merkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
