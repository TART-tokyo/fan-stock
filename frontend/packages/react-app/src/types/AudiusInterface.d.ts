/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AudiusInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "isClaimable(address)": FunctionFragment;
    "addAudiusList(uint256,string,uint256)": FunctionFragment;
    "distributedAmount(address)": FunctionFragment;
    "claim(address)": FunctionFragment;
    "requestCheckingAddress(address,bytes32,string,string,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "isClaimable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addAudiusList",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributedAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(
    functionFragment: "requestCheckingAddress",
    values: [string, BytesLike, string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "isClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAudiusList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestCheckingAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export class AudiusInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AudiusInterfaceInterface;

  functions: {
    isClaimable(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isClaimable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addAudiusList(
      id: BigNumberish,
      _followersHash: string,
      _followersNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAudiusList(uint256,string,uint256)"(
      id: BigNumberish,
      _followersHash: string,
      _followersNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    distributedAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "distributedAmount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(token: string, overrides?: Overrides): Promise<ContractTransaction>;

    "claim(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requestCheckingAddress(
      _oracle: string,
      _jobId: BytesLike,
      userAddress: string,
      tokenAddress: string,
      token: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "requestCheckingAddress(address,bytes32,string,string,address,uint256)"(
      _oracle: string,
      _jobId: BytesLike,
      userAddress: string,
      tokenAddress: string,
      token: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  isClaimable(token: string, overrides?: CallOverrides): Promise<boolean>;

  "isClaimable(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addAudiusList(
    id: BigNumberish,
    _followersHash: string,
    _followersNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAudiusList(uint256,string,uint256)"(
    id: BigNumberish,
    _followersHash: string,
    _followersNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  distributedAmount(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "distributedAmount(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(token: string, overrides?: Overrides): Promise<ContractTransaction>;

  "claim(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requestCheckingAddress(
    _oracle: string,
    _jobId: BytesLike,
    userAddress: string,
    tokenAddress: string,
    token: string,
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "requestCheckingAddress(address,bytes32,string,string,address,uint256)"(
    _oracle: string,
    _jobId: BytesLike,
    userAddress: string,
    tokenAddress: string,
    token: string,
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    isClaimable(token: string, overrides?: CallOverrides): Promise<boolean>;

    "isClaimable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addAudiusList(
      id: BigNumberish,
      _followersHash: string,
      _followersNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAudiusList(uint256,string,uint256)"(
      id: BigNumberish,
      _followersHash: string,
      _followersNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributedAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributedAmount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(token: string, overrides?: CallOverrides): Promise<void>;

    "claim(address)"(token: string, overrides?: CallOverrides): Promise<void>;

    requestCheckingAddress(
      _oracle: string,
      _jobId: BytesLike,
      userAddress: string,
      tokenAddress: string,
      token: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "requestCheckingAddress(address,bytes32,string,string,address,uint256)"(
      _oracle: string,
      _jobId: BytesLike,
      userAddress: string,
      tokenAddress: string,
      token: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    isClaimable(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isClaimable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAudiusList(
      id: BigNumberish,
      _followersHash: string,
      _followersNum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addAudiusList(uint256,string,uint256)"(
      id: BigNumberish,
      _followersHash: string,
      _followersNum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    distributedAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributedAmount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(token: string, overrides?: Overrides): Promise<BigNumber>;

    "claim(address)"(token: string, overrides?: Overrides): Promise<BigNumber>;

    requestCheckingAddress(
      _oracle: string,
      _jobId: BytesLike,
      userAddress: string,
      tokenAddress: string,
      token: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "requestCheckingAddress(address,bytes32,string,string,address,uint256)"(
      _oracle: string,
      _jobId: BytesLike,
      userAddress: string,
      tokenAddress: string,
      token: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isClaimable(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isClaimable(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAudiusList(
      id: BigNumberish,
      _followersHash: string,
      _followersNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAudiusList(uint256,string,uint256)"(
      id: BigNumberish,
      _followersHash: string,
      _followersNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    distributedAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributedAmount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(token: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requestCheckingAddress(
      _oracle: string,
      _jobId: BytesLike,
      userAddress: string,
      tokenAddress: string,
      token: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "requestCheckingAddress(address,bytes32,string,string,address,uint256)"(
      _oracle: string,
      _jobId: BytesLike,
      userAddress: string,
      tokenAddress: string,
      token: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
