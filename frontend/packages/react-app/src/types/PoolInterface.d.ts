/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PoolInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "addStakingList(address,address,bool)": FunctionFragment;
    "earned(address,address,uint256,uint8)": FunctionFragment;
    "stake(uint256,address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "claim(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addStakingList",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addStakingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;

  events: {};
}

export class PoolInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PoolInterfaceInterface;

  functions: {
    addStakingList(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addStakingList(address,address,bool)"(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    earned(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "earned(address,address,uint256,uint8)"(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stake(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claim(token: string, overrides?: Overrides): Promise<ContractTransaction>;

    "claim(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addStakingList(
    creator: string,
    token: string,
    paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addStakingList(address,address,bool)"(
    creator: string,
    token: string,
    paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  earned(
    account: string,
    token: string,
    totalSupply: BigNumberish,
    decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "earned(address,address,uint256,uint8)"(
    account: string,
    token: string,
    totalSupply: BigNumberish,
    decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stake(
    amount: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256,address)"(
    amount: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address)"(
    amount: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claim(token: string, overrides?: Overrides): Promise<ContractTransaction>;

  "claim(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addStakingList(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addStakingList(address,address,bool)"(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    earned(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earned(address,address,uint256,uint8)"(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(token: string, overrides?: CallOverrides): Promise<void>;

    "claim(address)"(token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addStakingList(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addStakingList(address,address,bool)"(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    earned(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earned(address,address,uint256,uint8)"(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stake(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claim(token: string, overrides?: Overrides): Promise<BigNumber>;

    "claim(address)"(token: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addStakingList(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addStakingList(address,address,bool)"(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earned(address,address,uint256,uint8)"(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claim(token: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
