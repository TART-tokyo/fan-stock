/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface WalletCampaignInterface extends ethers.utils.Interface {
  functions: {
    "campaignInfoCid()": FunctionFragment;
    "campaignToken()": FunctionFragment;
    "cancelCampaign()": FunctionFragment;
    "claimAmount()": FunctionFragment;
    "claimedNum()": FunctionFragment;
    "endDate()": FunctionFragment;
    "isClaimed(uint256)": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "merkleTreeCid()": FunctionFragment;
    "owner()": FunctionFragment;
    "recipientsCid()": FunctionFragment;
    "refundDestination()": FunctionFragment;
    "refundRemainingTokens()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startDate()": FunctionFragment;
    "status()": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "claim(uint256,address,uint256,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "campaignInfoCid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedNum",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleTreeCid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recipientsCid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundDestination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundRemainingTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, string, BigNumberish, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "campaignInfoCid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimedNum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "merkleTreeCid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientsCid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundRemainingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;

  events: {
    "Claim(address,address)": EventFragment;
    "Claimed(uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateStatus()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateStatus"): EventFragment;
}

export class WalletCampaign extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: WalletCampaignInterface;

  functions: {
    campaignInfoCid(overrides?: CallOverrides): Promise<[string]>;

    "campaignInfoCid()"(overrides?: CallOverrides): Promise<[string]>;

    campaignToken(overrides?: CallOverrides): Promise<[string]>;

    "campaignToken()"(overrides?: CallOverrides): Promise<[string]>;

    cancelCampaign(overrides?: Overrides): Promise<ContractTransaction>;

    "cancelCampaign()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimedNum(overrides?: CallOverrides): Promise<[number]>;

    "claimedNum()"(overrides?: CallOverrides): Promise<[number]>;

    endDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "endDate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isClaimed(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isClaimed(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<[string]>;

    merkleTreeCid(overrides?: CallOverrides): Promise<[string]>;

    "merkleTreeCid()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    recipientsCid(overrides?: CallOverrides): Promise<[string]>;

    "recipientsCid()"(overrides?: CallOverrides): Promise<[string]>;

    refundDestination(overrides?: CallOverrides): Promise<[string]>;

    "refundDestination()"(overrides?: CallOverrides): Promise<[string]>;

    refundRemainingTokens(overrides?: Overrides): Promise<ContractTransaction>;

    "refundRemainingTokens()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    startDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startDate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    status(overrides?: CallOverrides): Promise<[number]>;

    "status()"(overrides?: CallOverrides): Promise<[number]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claim(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(uint256,address,uint256,bytes32[])"(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  campaignInfoCid(overrides?: CallOverrides): Promise<string>;

  "campaignInfoCid()"(overrides?: CallOverrides): Promise<string>;

  campaignToken(overrides?: CallOverrides): Promise<string>;

  "campaignToken()"(overrides?: CallOverrides): Promise<string>;

  cancelCampaign(overrides?: Overrides): Promise<ContractTransaction>;

  "cancelCampaign()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "claimAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  claimedNum(overrides?: CallOverrides): Promise<number>;

  "claimedNum()"(overrides?: CallOverrides): Promise<number>;

  endDate(overrides?: CallOverrides): Promise<BigNumber>;

  "endDate()"(overrides?: CallOverrides): Promise<BigNumber>;

  isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isClaimed(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  "merkleRoot()"(overrides?: CallOverrides): Promise<string>;

  merkleTreeCid(overrides?: CallOverrides): Promise<string>;

  "merkleTreeCid()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  recipientsCid(overrides?: CallOverrides): Promise<string>;

  "recipientsCid()"(overrides?: CallOverrides): Promise<string>;

  refundDestination(overrides?: CallOverrides): Promise<string>;

  "refundDestination()"(overrides?: CallOverrides): Promise<string>;

  refundRemainingTokens(overrides?: Overrides): Promise<ContractTransaction>;

  "refundRemainingTokens()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  startDate(overrides?: CallOverrides): Promise<BigNumber>;

  "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

  status(overrides?: CallOverrides): Promise<number>;

  "status()"(overrides?: CallOverrides): Promise<number>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claim(
    index: BigNumberish,
    account: string,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(uint256,address,uint256,bytes32[])"(
    index: BigNumberish,
    account: string,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    campaignInfoCid(overrides?: CallOverrides): Promise<string>;

    "campaignInfoCid()"(overrides?: CallOverrides): Promise<string>;

    campaignToken(overrides?: CallOverrides): Promise<string>;

    "campaignToken()"(overrides?: CallOverrides): Promise<string>;

    cancelCampaign(overrides?: CallOverrides): Promise<void>;

    "cancelCampaign()"(overrides?: CallOverrides): Promise<void>;

    claimAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "claimAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimedNum(overrides?: CallOverrides): Promise<number>;

    "claimedNum()"(overrides?: CallOverrides): Promise<number>;

    endDate(overrides?: CallOverrides): Promise<BigNumber>;

    "endDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isClaimed(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<string>;

    merkleTreeCid(overrides?: CallOverrides): Promise<string>;

    "merkleTreeCid()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    recipientsCid(overrides?: CallOverrides): Promise<string>;

    "recipientsCid()"(overrides?: CallOverrides): Promise<string>;

    refundDestination(overrides?: CallOverrides): Promise<string>;

    "refundDestination()"(overrides?: CallOverrides): Promise<string>;

    refundRemainingTokens(overrides?: CallOverrides): Promise<void>;

    "refundRemainingTokens()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<number>;

    "status()"(overrides?: CallOverrides): Promise<number>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(uint256,address,uint256,bytes32[])"(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Claim(from: string | null, to: string | null): EventFilter;

    Claimed(index: null, account: null, amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    UpdateStatus(): EventFilter;
  };

  estimateGas: {
    campaignInfoCid(overrides?: CallOverrides): Promise<BigNumber>;

    "campaignInfoCid()"(overrides?: CallOverrides): Promise<BigNumber>;

    campaignToken(overrides?: CallOverrides): Promise<BigNumber>;

    "campaignToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelCampaign(overrides?: Overrides): Promise<BigNumber>;

    "cancelCampaign()"(overrides?: Overrides): Promise<BigNumber>;

    claimAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "claimAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimedNum(overrides?: CallOverrides): Promise<BigNumber>;

    "claimedNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    endDate(overrides?: CallOverrides): Promise<BigNumber>;

    "endDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isClaimed(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    merkleTreeCid(overrides?: CallOverrides): Promise<BigNumber>;

    "merkleTreeCid()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    recipientsCid(overrides?: CallOverrides): Promise<BigNumber>;

    "recipientsCid()"(overrides?: CallOverrides): Promise<BigNumber>;

    refundDestination(overrides?: CallOverrides): Promise<BigNumber>;

    "refundDestination()"(overrides?: CallOverrides): Promise<BigNumber>;

    refundRemainingTokens(overrides?: Overrides): Promise<BigNumber>;

    "refundRemainingTokens()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    "status()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claim(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(uint256,address,uint256,bytes32[])"(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    campaignInfoCid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "campaignInfoCid()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "campaignToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelCampaign(overrides?: Overrides): Promise<PopulatedTransaction>;

    "cancelCampaign()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimedNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimedNum()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endDate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClaimed(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isClaimed(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleTreeCid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "merkleTreeCid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipientsCid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "recipientsCid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundDestination(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "refundDestination()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refundRemainingTokens(overrides?: Overrides): Promise<PopulatedTransaction>;

    "refundRemainingTokens()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    startDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startDate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "status()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claim(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(uint256,address,uint256,bytes32[])"(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
