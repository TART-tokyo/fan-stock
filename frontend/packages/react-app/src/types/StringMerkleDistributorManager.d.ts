/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StringMerkleDistributorManagerInterface
  extends ethers.utils.Interface {
  functions: {
    "addDistribution(address,bytes32,uint256)": FunctionFragment;
    "distributionMap(uint64)": FunctionFragment;
    "isClaimed(uint64,uint256)": FunctionFragment;
    "merkleRoot(uint64)": FunctionFragment;
    "nextDistributionId()": FunctionFragment;
    "remainingAmount(uint64)": FunctionFragment;
    "token(uint64)": FunctionFragment;
    "claim(uint64,uint256,string,uint256,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDistribution",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextDistributionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextDistributionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;

  events: {
    "Claimed(uint64,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
}

export class StringMerkleDistributorManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StringMerkleDistributorManagerInterface;

  functions: {
    addDistribution(
      newToken: string,
      newMerkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addDistribution(address,bytes32,uint256)"(
      newToken: string,
      newMerkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    distributionMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string;
        merkleRoot: string;
        remainingAmount: BigNumber;
      }
    >;

    "distributionMap(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string;
        merkleRoot: string;
        remainingAmount: BigNumber;
      }
    >;

    isClaimed(
      distributionId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isClaimed(uint64,uint256)"(
      distributionId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merkleRoot(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "merkleRoot(uint64)"(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nextDistributionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextDistributionId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    remainingAmount(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "remainingAmount(uint64)"(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    token(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "token(uint64)"(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claim(
      distributionId: BigNumberish,
      index: BigNumberish,
      target: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(uint64,uint256,string,uint256,bytes32[])"(
      distributionId: BigNumberish,
      index: BigNumberish,
      target: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addDistribution(
    newToken: string,
    newMerkleRoot: BytesLike,
    allowance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addDistribution(address,bytes32,uint256)"(
    newToken: string,
    newMerkleRoot: BytesLike,
    allowance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  distributionMap(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      token: string;
      merkleRoot: string;
      remainingAmount: BigNumber;
    }
  >;

  "distributionMap(uint64)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      token: string;
      merkleRoot: string;
      remainingAmount: BigNumber;
    }
  >;

  isClaimed(
    distributionId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isClaimed(uint64,uint256)"(
    distributionId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  merkleRoot(
    distributionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "merkleRoot(uint64)"(
    distributionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  nextDistributionId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextDistributionId()"(overrides?: CallOverrides): Promise<BigNumber>;

  remainingAmount(
    distributionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "remainingAmount(uint64)"(
    distributionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  token(
    distributionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "token(uint64)"(
    distributionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  claim(
    distributionId: BigNumberish,
    index: BigNumberish,
    target: string,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(uint64,uint256,string,uint256,bytes32[])"(
    distributionId: BigNumberish,
    index: BigNumberish,
    target: string,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addDistribution(
      newToken: string,
      newMerkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addDistribution(address,bytes32,uint256)"(
      newToken: string,
      newMerkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributionMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string;
        merkleRoot: string;
        remainingAmount: BigNumber;
      }
    >;

    "distributionMap(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string;
        merkleRoot: string;
        remainingAmount: BigNumber;
      }
    >;

    isClaimed(
      distributionId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isClaimed(uint64,uint256)"(
      distributionId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    merkleRoot(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "merkleRoot(uint64)"(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    nextDistributionId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextDistributionId()"(overrides?: CallOverrides): Promise<BigNumber>;

    remainingAmount(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remainingAmount(uint64)"(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "token(uint64)"(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    claim(
      distributionId: BigNumberish,
      index: BigNumberish,
      target: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(uint64,uint256,string,uint256,bytes32[])"(
      distributionId: BigNumberish,
      index: BigNumberish,
      target: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Claimed(
      distributionId: BigNumberish | null,
      account: string | null,
      amount: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { distributionId: BigNumber; account: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addDistribution(
      newToken: string,
      newMerkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addDistribution(address,bytes32,uint256)"(
      newToken: string,
      newMerkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    distributionMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributionMap(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimed(
      distributionId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isClaimed(uint64,uint256)"(
      distributionId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoot(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "merkleRoot(uint64)"(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextDistributionId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextDistributionId()"(overrides?: CallOverrides): Promise<BigNumber>;

    remainingAmount(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remainingAmount(uint64)"(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "token(uint64)"(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      distributionId: BigNumberish,
      index: BigNumberish,
      target: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(uint64,uint256,string,uint256,bytes32[])"(
      distributionId: BigNumberish,
      index: BigNumberish,
      target: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDistribution(
      newToken: string,
      newMerkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addDistribution(address,bytes32,uint256)"(
      newToken: string,
      newMerkleRoot: BytesLike,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    distributionMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributionMap(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClaimed(
      distributionId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isClaimed(uint64,uint256)"(
      distributionId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoot(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "merkleRoot(uint64)"(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextDistributionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextDistributionId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remainingAmount(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "remainingAmount(uint64)"(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "token(uint64)"(
      distributionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      distributionId: BigNumberish,
      index: BigNumberish,
      target: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(uint64,uint256,string,uint256,bytes32[])"(
      distributionId: BigNumberish,
      index: BigNumberish,
      target: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
