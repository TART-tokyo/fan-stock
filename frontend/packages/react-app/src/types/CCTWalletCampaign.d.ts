/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CCTWalletCampaignInterface extends ethers.utils.Interface {
  functions: {
    "campaignId()": FunctionFragment;
    "campaignInfoCid()": FunctionFragment;
    "cancelCampaign()": FunctionFragment;
    "claimAmount()": FunctionFragment;
    "claimedNum()": FunctionFragment;
    "claimedUserList(address)": FunctionFragment;
    "endDate()": FunctionFragment;
    "nextUserId()": FunctionFragment;
    "owner()": FunctionFragment;
    "recipientsCid()": FunctionFragment;
    "refundDestination()": FunctionFragment;
    "refundRemainingTokens()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sentUserList(address)": FunctionFragment;
    "startDate()": FunctionFragment;
    "status()": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userIdList(address)": FunctionFragment;
    "userList(uint64)": FunctionFragment;
    "generateClaimKey(uint64)": FunctionFragment;
    "isClaimable(address,address)": FunctionFragment;
    "claim(bytes32,bytes32,bytes32,uint8,address,address)": FunctionFragment;
    "fulfill(bytes32,bytes32)": FunctionFragment;
    "requestCheckingIsClaimable(address,bytes32,address)": FunctionFragment;
    "withdrawLink()": FunctionFragment;
    "cancelRequest(bytes32,uint256,bytes4,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "campaignId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignInfoCid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedUserList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "endDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextUserId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recipientsCid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundDestination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundRemainingTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sentUserList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userIdList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateClaimKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimable",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCheckingIsClaimable",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRequest",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "campaignId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "campaignInfoCid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimedNum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedUserList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextUserId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientsCid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundRemainingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sentUserList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userIdList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateClaimKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestCheckingIsClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRequest",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "Claim(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateStatus()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateStatus"): EventFragment;
}

export class CCTWalletCampaign extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CCTWalletCampaignInterface;

  functions: {
    campaignId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "campaignId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    campaignInfoCid(overrides?: CallOverrides): Promise<[string]>;

    "campaignInfoCid()"(overrides?: CallOverrides): Promise<[string]>;

    cancelCampaign(overrides?: Overrides): Promise<ContractTransaction>;

    "cancelCampaign()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "claimAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimedNum(overrides?: CallOverrides): Promise<[number]>;

    "claimedNum()"(overrides?: CallOverrides): Promise<[number]>;

    claimedUserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "claimedUserList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    endDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "endDate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextUserId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextUserId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    recipientsCid(overrides?: CallOverrides): Promise<[string]>;

    "recipientsCid()"(overrides?: CallOverrides): Promise<[string]>;

    refundDestination(overrides?: CallOverrides): Promise<[string]>;

    "refundDestination()"(overrides?: CallOverrides): Promise<[string]>;

    refundRemainingTokens(overrides?: Overrides): Promise<ContractTransaction>;

    "refundRemainingTokens()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    sentUserList(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "sentUserList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    startDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startDate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    status(overrides?: CallOverrides): Promise<[number]>;

    "status()"(overrides?: CallOverrides): Promise<[number]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userIdList(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "userIdList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "userList(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateClaimKey(
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "generateClaimKey(uint64)"(
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isClaimable(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isClaimable(address,address)"(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claim(
      toAddressHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(bytes32,bytes32,bytes32,uint8,address,address)"(
      toAddressHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fulfill(
      _requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "fulfill(bytes32,bytes32)"(
      _requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Request to Chainlink whether target address is claimable token Target address usually has no ETH, so another wallet send this function for target address
     */
    requestCheckingIsClaimable(
      _oracle: string,
      _jobId: BytesLike,
      targetAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Request to Chainlink whether target address is claimable token Target address usually has no ETH, so another wallet send this function for target address
     */
    "requestCheckingIsClaimable(address,bytes32,address)"(
      _oracle: string,
      _jobId: BytesLike,
      targetAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows the owner to withdraw any LINK balance on the contract
     */
    withdrawLink(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Allows the owner to withdraw any LINK balance on the contract
     */
    "withdrawLink()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Call this method if no response is received within 5 minutes
     * @param _callbackFunctionId The bytes4 callback function ID specified for the request to cancel
     * @param _expiration The expiration generated for the request to cancel
     * @param _payment The payment specified for the request to cancel
     * @param _requestId The ID that was generated for the request to cancel
     */
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Call this method if no response is received within 5 minutes
     * @param _callbackFunctionId The bytes4 callback function ID specified for the request to cancel
     * @param _expiration The expiration generated for the request to cancel
     * @param _payment The payment specified for the request to cancel
     * @param _requestId The ID that was generated for the request to cancel
     */
    "cancelRequest(bytes32,uint256,bytes4,uint256)"(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  campaignId(overrides?: CallOverrides): Promise<BigNumber>;

  "campaignId()"(overrides?: CallOverrides): Promise<BigNumber>;

  campaignInfoCid(overrides?: CallOverrides): Promise<string>;

  "campaignInfoCid()"(overrides?: CallOverrides): Promise<string>;

  cancelCampaign(overrides?: Overrides): Promise<ContractTransaction>;

  "cancelCampaign()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "claimAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  claimedNum(overrides?: CallOverrides): Promise<number>;

  "claimedNum()"(overrides?: CallOverrides): Promise<number>;

  claimedUserList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "claimedUserList(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  endDate(overrides?: CallOverrides): Promise<BigNumber>;

  "endDate()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextUserId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextUserId()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  recipientsCid(overrides?: CallOverrides): Promise<string>;

  "recipientsCid()"(overrides?: CallOverrides): Promise<string>;

  refundDestination(overrides?: CallOverrides): Promise<string>;

  "refundDestination()"(overrides?: CallOverrides): Promise<string>;

  refundRemainingTokens(overrides?: Overrides): Promise<ContractTransaction>;

  "refundRemainingTokens()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  sentUserList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "sentUserList(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  startDate(overrides?: CallOverrides): Promise<BigNumber>;

  "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

  status(overrides?: CallOverrides): Promise<number>;

  "status()"(overrides?: CallOverrides): Promise<number>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userIdList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "userIdList(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "userList(uint64)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  generateClaimKey(
    userId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "generateClaimKey(uint64)"(
    userId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isClaimable(
    from: string,
    to: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isClaimable(address,address)"(
    from: string,
    to: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claim(
    toAddressHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    from: string,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(bytes32,bytes32,bytes32,uint8,address,address)"(
    toAddressHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    from: string,
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fulfill(
    _requestId: BytesLike,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "fulfill(bytes32,bytes32)"(
    _requestId: BytesLike,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Request to Chainlink whether target address is claimable token Target address usually has no ETH, so another wallet send this function for target address
   */
  requestCheckingIsClaimable(
    _oracle: string,
    _jobId: BytesLike,
    targetAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Request to Chainlink whether target address is claimable token Target address usually has no ETH, so another wallet send this function for target address
   */
  "requestCheckingIsClaimable(address,bytes32,address)"(
    _oracle: string,
    _jobId: BytesLike,
    targetAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows the owner to withdraw any LINK balance on the contract
   */
  withdrawLink(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Allows the owner to withdraw any LINK balance on the contract
   */
  "withdrawLink()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Call this method if no response is received within 5 minutes
   * @param _callbackFunctionId The bytes4 callback function ID specified for the request to cancel
   * @param _expiration The expiration generated for the request to cancel
   * @param _payment The payment specified for the request to cancel
   * @param _requestId The ID that was generated for the request to cancel
   */
  cancelRequest(
    _requestId: BytesLike,
    _payment: BigNumberish,
    _callbackFunctionId: BytesLike,
    _expiration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Call this method if no response is received within 5 minutes
   * @param _callbackFunctionId The bytes4 callback function ID specified for the request to cancel
   * @param _expiration The expiration generated for the request to cancel
   * @param _payment The payment specified for the request to cancel
   * @param _requestId The ID that was generated for the request to cancel
   */
  "cancelRequest(bytes32,uint256,bytes4,uint256)"(
    _requestId: BytesLike,
    _payment: BigNumberish,
    _callbackFunctionId: BytesLike,
    _expiration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    campaignId(overrides?: CallOverrides): Promise<BigNumber>;

    "campaignId()"(overrides?: CallOverrides): Promise<BigNumber>;

    campaignInfoCid(overrides?: CallOverrides): Promise<string>;

    "campaignInfoCid()"(overrides?: CallOverrides): Promise<string>;

    cancelCampaign(overrides?: CallOverrides): Promise<void>;

    "cancelCampaign()"(overrides?: CallOverrides): Promise<void>;

    claimAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "claimAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimedNum(overrides?: CallOverrides): Promise<number>;

    "claimedNum()"(overrides?: CallOverrides): Promise<number>;

    claimedUserList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "claimedUserList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    endDate(overrides?: CallOverrides): Promise<BigNumber>;

    "endDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextUserId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextUserId()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    recipientsCid(overrides?: CallOverrides): Promise<string>;

    "recipientsCid()"(overrides?: CallOverrides): Promise<string>;

    refundDestination(overrides?: CallOverrides): Promise<string>;

    "refundDestination()"(overrides?: CallOverrides): Promise<string>;

    refundRemainingTokens(overrides?: CallOverrides): Promise<void>;

    "refundRemainingTokens()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    sentUserList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "sentUserList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<number>;

    "status()"(overrides?: CallOverrides): Promise<number>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userIdList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userIdList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "userList(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    generateClaimKey(
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateClaimKey(uint64)"(
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimable(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isClaimable(address,address)"(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claim(
      toAddressHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(bytes32,bytes32,bytes32,uint8,address,address)"(
      toAddressHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfill(
      _requestId: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "fulfill(bytes32,bytes32)"(
      _requestId: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Request to Chainlink whether target address is claimable token Target address usually has no ETH, so another wallet send this function for target address
     */
    requestCheckingIsClaimable(
      _oracle: string,
      _jobId: BytesLike,
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Request to Chainlink whether target address is claimable token Target address usually has no ETH, so another wallet send this function for target address
     */
    "requestCheckingIsClaimable(address,bytes32,address)"(
      _oracle: string,
      _jobId: BytesLike,
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Allows the owner to withdraw any LINK balance on the contract
     */
    withdrawLink(overrides?: CallOverrides): Promise<void>;

    /**
     * Allows the owner to withdraw any LINK balance on the contract
     */
    "withdrawLink()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Call this method if no response is received within 5 minutes
     * @param _callbackFunctionId The bytes4 callback function ID specified for the request to cancel
     * @param _expiration The expiration generated for the request to cancel
     * @param _payment The payment specified for the request to cancel
     * @param _requestId The ID that was generated for the request to cancel
     */
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Call this method if no response is received within 5 minutes
     * @param _callbackFunctionId The bytes4 callback function ID specified for the request to cancel
     * @param _expiration The expiration generated for the request to cancel
     * @param _payment The payment specified for the request to cancel
     * @param _requestId The ID that was generated for the request to cancel
     */
    "cancelRequest(bytes32,uint256,bytes4,uint256)"(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ChainlinkCancelled(id: BytesLike | null): EventFilter;

    ChainlinkFulfilled(id: BytesLike | null): EventFilter;

    ChainlinkRequested(id: BytesLike | null): EventFilter;

    Claim(from: string | null, to: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    UpdateStatus(): EventFilter;
  };

  estimateGas: {
    campaignId(overrides?: CallOverrides): Promise<BigNumber>;

    "campaignId()"(overrides?: CallOverrides): Promise<BigNumber>;

    campaignInfoCid(overrides?: CallOverrides): Promise<BigNumber>;

    "campaignInfoCid()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelCampaign(overrides?: Overrides): Promise<BigNumber>;

    "cancelCampaign()"(overrides?: Overrides): Promise<BigNumber>;

    claimAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "claimAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimedNum(overrides?: CallOverrides): Promise<BigNumber>;

    "claimedNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimedUserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimedUserList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endDate(overrides?: CallOverrides): Promise<BigNumber>;

    "endDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextUserId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextUserId()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    recipientsCid(overrides?: CallOverrides): Promise<BigNumber>;

    "recipientsCid()"(overrides?: CallOverrides): Promise<BigNumber>;

    refundDestination(overrides?: CallOverrides): Promise<BigNumber>;

    "refundDestination()"(overrides?: CallOverrides): Promise<BigNumber>;

    refundRemainingTokens(overrides?: Overrides): Promise<BigNumber>;

    "refundRemainingTokens()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    sentUserList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "sentUserList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    "startDate()"(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    "status()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userIdList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userIdList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "userList(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateClaimKey(
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateClaimKey(uint64)"(
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimable(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isClaimable(address,address)"(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      toAddressHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(bytes32,bytes32,bytes32,uint8,address,address)"(
      toAddressHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fulfill(
      _requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "fulfill(bytes32,bytes32)"(
      _requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Request to Chainlink whether target address is claimable token Target address usually has no ETH, so another wallet send this function for target address
     */
    requestCheckingIsClaimable(
      _oracle: string,
      _jobId: BytesLike,
      targetAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Request to Chainlink whether target address is claimable token Target address usually has no ETH, so another wallet send this function for target address
     */
    "requestCheckingIsClaimable(address,bytes32,address)"(
      _oracle: string,
      _jobId: BytesLike,
      targetAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows the owner to withdraw any LINK balance on the contract
     */
    withdrawLink(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Allows the owner to withdraw any LINK balance on the contract
     */
    "withdrawLink()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Call this method if no response is received within 5 minutes
     * @param _callbackFunctionId The bytes4 callback function ID specified for the request to cancel
     * @param _expiration The expiration generated for the request to cancel
     * @param _payment The payment specified for the request to cancel
     * @param _requestId The ID that was generated for the request to cancel
     */
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Call this method if no response is received within 5 minutes
     * @param _callbackFunctionId The bytes4 callback function ID specified for the request to cancel
     * @param _expiration The expiration generated for the request to cancel
     * @param _payment The payment specified for the request to cancel
     * @param _requestId The ID that was generated for the request to cancel
     */
    "cancelRequest(bytes32,uint256,bytes4,uint256)"(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    campaignId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "campaignId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaignInfoCid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "campaignInfoCid()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelCampaign(overrides?: Overrides): Promise<PopulatedTransaction>;

    "cancelCampaign()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimedNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimedNum()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimedUserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimedUserList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endDate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextUserId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextUserId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipientsCid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "recipientsCid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundDestination(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "refundDestination()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refundRemainingTokens(overrides?: Overrides): Promise<PopulatedTransaction>;

    "refundRemainingTokens()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    sentUserList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sentUserList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startDate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "status()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userIdList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userIdList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userList(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateClaimKey(
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateClaimKey(uint64)"(
      userId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClaimable(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isClaimable(address,address)"(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      toAddressHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(bytes32,bytes32,bytes32,uint8,address,address)"(
      toAddressHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      from: string,
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fulfill(
      _requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "fulfill(bytes32,bytes32)"(
      _requestId: BytesLike,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Request to Chainlink whether target address is claimable token Target address usually has no ETH, so another wallet send this function for target address
     */
    requestCheckingIsClaimable(
      _oracle: string,
      _jobId: BytesLike,
      targetAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Request to Chainlink whether target address is claimable token Target address usually has no ETH, so another wallet send this function for target address
     */
    "requestCheckingIsClaimable(address,bytes32,address)"(
      _oracle: string,
      _jobId: BytesLike,
      targetAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows the owner to withdraw any LINK balance on the contract
     */
    withdrawLink(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Allows the owner to withdraw any LINK balance on the contract
     */
    "withdrawLink()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Call this method if no response is received within 5 minutes
     * @param _callbackFunctionId The bytes4 callback function ID specified for the request to cancel
     * @param _expiration The expiration generated for the request to cancel
     * @param _payment The payment specified for the request to cancel
     * @param _requestId The ID that was generated for the request to cancel
     */
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Call this method if no response is received within 5 minutes
     * @param _callbackFunctionId The bytes4 callback function ID specified for the request to cancel
     * @param _expiration The expiration generated for the request to cancel
     * @param _payment The payment specified for the request to cancel
     * @param _requestId The ID that was generated for the request to cancel
     */
    "cancelRequest(bytes32,uint256,bytes4,uint256)"(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
