/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakingPoolInterface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "registeredTokens(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokensCreator(address)": FunctionFragment;
    "tokensStakingPaused(address)": FunctionFragment;
    "tokensTotalSupply(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "balanceOf(address,address)": FunctionFragment;
    "addStakingList(address,address,bool)": FunctionFragment;
    "pauseStakingOf(address)": FunctionFragment;
    "resumeStakingOf(address)": FunctionFragment;
    "earned(address,address,uint256,uint8)": FunctionFragment;
    "stake(uint256,address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "claim(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registeredTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensCreator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensStakingPaused",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensTotalSupply",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addStakingList",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseStakingOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeStakingOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registeredTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensStakingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStakingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseStakingOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeStakingOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Stake(address,address,uint256)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class StakingPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakingPoolInterface;

  functions: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    registeredTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "registeredTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    tokensCreator(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "tokensCreator(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokensStakingPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "tokensStakingPaused(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokensTotalSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokensTotalSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,address)"(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addStakingList(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addStakingList(address,address,bool)"(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pauseStakingOf(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pauseStakingOf(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resumeStakingOf(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "resumeStakingOf(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    earned(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "earned(address,address,uint256,uint8)"(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stake(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claim(token: string, overrides?: Overrides): Promise<ContractTransaction>;

    "claim(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  registeredTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "registeredTokens(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  tokensCreator(arg0: string, overrides?: CallOverrides): Promise<string>;

  "tokensCreator(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  tokensStakingPaused(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "tokensStakingPaused(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensTotalSupply(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokensTotalSupply(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,address)"(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addStakingList(
    creator: string,
    token: string,
    paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addStakingList(address,address,bool)"(
    creator: string,
    token: string,
    paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pauseStakingOf(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pauseStakingOf(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resumeStakingOf(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "resumeStakingOf(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  earned(
    account: string,
    token: string,
    totalSupply: BigNumberish,
    decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "earned(address,address,uint256,uint8)"(
    account: string,
    token: string,
    totalSupply: BigNumberish,
    decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stake(
    amount: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256,address)"(
    amount: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address)"(
    amount: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claim(token: string, overrides?: Overrides): Promise<ContractTransaction>;

  "claim(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    registeredTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "registeredTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    tokensCreator(arg0: string, overrides?: CallOverrides): Promise<string>;

    "tokensCreator(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    tokensStakingPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "tokensStakingPaused(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensTotalSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensTotalSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStakingList(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "addStakingList(address,address,bool)"(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseStakingOf(token: string, overrides?: CallOverrides): Promise<void>;

    "pauseStakingOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resumeStakingOf(token: string, overrides?: CallOverrides): Promise<void>;

    "resumeStakingOf(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    earned(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earned(address,address,uint256,uint8)"(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(token: string, overrides?: CallOverrides): Promise<void>;

    "claim(address)"(token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Stake(from: string | null, token: string | null, amount: null): EventFilter;

    Withdraw(
      from: string | null,
      token: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    registeredTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registeredTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    tokensCreator(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokensCreator(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensStakingPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensStakingPaused(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensTotalSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensTotalSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStakingList(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addStakingList(address,address,bool)"(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pauseStakingOf(token: string, overrides?: Overrides): Promise<BigNumber>;

    "pauseStakingOf(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    resumeStakingOf(token: string, overrides?: Overrides): Promise<BigNumber>;

    "resumeStakingOf(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    earned(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "earned(address,address,uint256,uint8)"(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stake(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claim(token: string, overrides?: Overrides): Promise<BigNumber>;

    "claim(address)"(token: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registeredTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registeredTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    tokensCreator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensCreator(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensStakingPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensStakingPaused(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensTotalSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensTotalSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,address)"(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStakingList(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addStakingList(address,address,bool)"(
      creator: string,
      token: string,
      paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pauseStakingOf(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pauseStakingOf(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    resumeStakingOf(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "resumeStakingOf(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earned(address,address,uint256,uint8)"(
      account: string,
      token: string,
      totalSupply: BigNumberish,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claim(token: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
