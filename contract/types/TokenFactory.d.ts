/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TokenFactoryInterface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateOperator(address)": FunctionFragment;
    "updateDonatee(address)": FunctionFragment;
    "updateCreatorFund(address)": FunctionFragment;
    "updateTreasuryVester(address)": FunctionFragment;
    "createToken(string,string,uint256,uint256)": FunctionFragment;
    "createExclusiveToken(address,string,string,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDonatee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreatorFund",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasuryVester",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createExclusiveToken",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDonatee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreatorFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasuryVester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createExclusiveToken",
    data: BytesLike
  ): Result;

  events: {
    "CreateToken(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateCreatorFund(address)": EventFragment;
    "UpdateDonatee(address)": EventFragment;
    "UpdateOperator(address)": EventFragment;
    "UpdateTreasuryVester(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCreatorFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDonatee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTreasuryVester"): EventFragment;
}

export class TokenFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenFactoryInterface;

  functions: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateOperator(
      newOperator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateOperator(address)"(
      newOperator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateDonatee(
      newDonatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateDonatee(address)"(
      newDonatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateCreatorFund(
      newCreatorFund: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateCreatorFund(address)"(
      newCreatorFund: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTreasuryVester(
      newTreasuryVester: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTreasuryVester(address)"(
      newTreasuryVester: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     */
    createToken(
      name: string,
      symbol: string,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     */
    "createToken(string,string,uint256,uint256)"(
      name: string,
      symbol: string,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     * @param operationRatio percentage with decimal 2
     * @param vestingYears percentage with decimal 0
     */
    createExclusiveToken(
      creator: string,
      name: string,
      symbol: string,
      operationRatio: BigNumberish,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     * @param operationRatio percentage with decimal 2
     * @param vestingYears percentage with decimal 0
     */
    "createExclusiveToken(address,string,string,uint256,uint256,uint256,uint256)"(
      creator: string,
      name: string,
      symbol: string,
      operationRatio: BigNumberish,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateOperator(
    newOperator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateOperator(address)"(
    newOperator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateDonatee(
    newDonatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateDonatee(address)"(
    newDonatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateCreatorFund(
    newCreatorFund: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateCreatorFund(address)"(
    newCreatorFund: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTreasuryVester(
    newTreasuryVester: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTreasuryVester(address)"(
    newTreasuryVester: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
   * @param donateeRatio percentage with decimal 2
   */
  createToken(
    name: string,
    symbol: string,
    donateeRatio: BigNumberish,
    creatorFundRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
   * @param donateeRatio percentage with decimal 2
   */
  "createToken(string,string,uint256,uint256)"(
    name: string,
    symbol: string,
    donateeRatio: BigNumberish,
    creatorFundRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
   * @param donateeRatio percentage with decimal 2
   * @param operationRatio percentage with decimal 2
   * @param vestingYears percentage with decimal 0
   */
  createExclusiveToken(
    creator: string,
    name: string,
    symbol: string,
    operationRatio: BigNumberish,
    donateeRatio: BigNumberish,
    creatorFundRatio: BigNumberish,
    vestingYears: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
   * @param donateeRatio percentage with decimal 2
   * @param operationRatio percentage with decimal 2
   * @param vestingYears percentage with decimal 0
   */
  "createExclusiveToken(address,string,string,uint256,uint256,uint256,uint256)"(
    creator: string,
    name: string,
    symbol: string,
    operationRatio: BigNumberish,
    donateeRatio: BigNumberish,
    creatorFundRatio: BigNumberish,
    vestingYears: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOperator(
      newOperator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateOperator(address)"(
      newOperator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDonatee(newDonatee: string, overrides?: CallOverrides): Promise<void>;

    "updateDonatee(address)"(
      newDonatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCreatorFund(
      newCreatorFund: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCreatorFund(address)"(
      newCreatorFund: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTreasuryVester(
      newTreasuryVester: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateTreasuryVester(address)"(
      newTreasuryVester: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     */
    createToken(
      name: string,
      symbol: string,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     */
    "createToken(string,string,uint256,uint256)"(
      name: string,
      symbol: string,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     * @param operationRatio percentage with decimal 2
     * @param vestingYears percentage with decimal 0
     */
    createExclusiveToken(
      creator: string,
      name: string,
      symbol: string,
      operationRatio: BigNumberish,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     * @param operationRatio percentage with decimal 2
     * @param vestingYears percentage with decimal 0
     */
    "createExclusiveToken(address,string,string,uint256,uint256,uint256,uint256)"(
      creator: string,
      name: string,
      symbol: string,
      operationRatio: BigNumberish,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CreateToken(
      token: string | null,
      creator: string | null
    ): TypedEventFilter<[string, string], { token: string; creator: string }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    UpdateCreatorFund(
      creatorFund: null
    ): TypedEventFilter<[string], { creatorFund: string }>;

    UpdateDonatee(
      donatee: null
    ): TypedEventFilter<[string], { donatee: string }>;

    UpdateOperator(
      operator: null
    ): TypedEventFilter<[string], { operator: string }>;

    UpdateTreasuryVester(
      treasuryVester: null
    ): TypedEventFilter<[string], { treasuryVester: string }>;
  };

  estimateGas: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateOperator(
      newOperator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateOperator(address)"(
      newOperator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateDonatee(
      newDonatee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateDonatee(address)"(
      newDonatee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateCreatorFund(
      newCreatorFund: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateCreatorFund(address)"(
      newCreatorFund: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateTreasuryVester(
      newTreasuryVester: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateTreasuryVester(address)"(
      newTreasuryVester: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     */
    createToken(
      name: string,
      symbol: string,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     */
    "createToken(string,string,uint256,uint256)"(
      name: string,
      symbol: string,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     * @param operationRatio percentage with decimal 2
     * @param vestingYears percentage with decimal 0
     */
    createExclusiveToken(
      creator: string,
      name: string,
      symbol: string,
      operationRatio: BigNumberish,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     * @param operationRatio percentage with decimal 2
     * @param vestingYears percentage with decimal 0
     */
    "createExclusiveToken(address,string,string,uint256,uint256,uint256,uint256)"(
      creator: string,
      name: string,
      symbol: string,
      operationRatio: BigNumberish,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateOperator(
      newOperator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateOperator(address)"(
      newOperator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateDonatee(
      newDonatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateDonatee(address)"(
      newDonatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateCreatorFund(
      newCreatorFund: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateCreatorFund(address)"(
      newCreatorFund: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateTreasuryVester(
      newTreasuryVester: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTreasuryVester(address)"(
      newTreasuryVester: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     */
    createToken(
      name: string,
      symbol: string,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     */
    "createToken(string,string,uint256,uint256)"(
      name: string,
      symbol: string,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     * @param operationRatio percentage with decimal 2
     * @param vestingYears percentage with decimal 0
     */
    createExclusiveToken(
      creator: string,
      name: string,
      symbol: string,
      operationRatio: BigNumberish,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param creatorFundRatio percentage with decimal 2        Pass a percent multiplied by 100. e.g. 10% => 1000
     * @param donateeRatio percentage with decimal 2
     * @param operationRatio percentage with decimal 2
     * @param vestingYears percentage with decimal 0
     */
    "createExclusiveToken(address,string,string,uint256,uint256,uint256,uint256)"(
      creator: string,
      name: string,
      symbol: string,
      operationRatio: BigNumberish,
      donateeRatio: BigNumberish,
      creatorFundRatio: BigNumberish,
      vestingYears: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
