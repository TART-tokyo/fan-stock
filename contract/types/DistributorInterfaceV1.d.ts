/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DistributorInterfaceV1Interface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "createCampaign(bytes32,address,string,string,uint256)": FunctionFragment;
    "updateDistributorInfo(string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [BytesLike, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDistributorInfo",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDistributorInfo",
    data: BytesLike
  ): Result;

  events: {
    "CreateCampaign(uint64,address,address,string,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateDistributorInfo(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateCampaign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDistributorInfo"): EventFragment;
}

export class DistributorInterfaceV1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DistributorInterfaceV1Interface;

  functions: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createCampaign(
      merkleRoot: BytesLike,
      token: string,
      merkleTreeCid: string,
      campaignInfoCid: string,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createCampaign(bytes32,address,string,string,uint256)"(
      merkleRoot: BytesLike,
      token: string,
      merkleTreeCid: string,
      campaignInfoCid: string,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateDistributorInfo(
      distributorInfoCid: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateDistributorInfo(string)"(
      distributorInfoCid: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createCampaign(
    merkleRoot: BytesLike,
    token: string,
    merkleTreeCid: string,
    campaignInfoCid: string,
    allowance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createCampaign(bytes32,address,string,string,uint256)"(
    merkleRoot: BytesLike,
    token: string,
    merkleTreeCid: string,
    campaignInfoCid: string,
    allowance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateDistributorInfo(
    distributorInfoCid: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateDistributorInfo(string)"(
    distributorInfoCid: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createCampaign(
      merkleRoot: BytesLike,
      token: string,
      merkleTreeCid: string,
      campaignInfoCid: string,
      allowance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createCampaign(bytes32,address,string,string,uint256)"(
      merkleRoot: BytesLike,
      token: string,
      merkleTreeCid: string,
      campaignInfoCid: string,
      allowance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDistributorInfo(
      distributorInfoCid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateDistributorInfo(string)"(
      distributorInfoCid: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CreateCampaign(
      distributionId: BigNumberish | null,
      token: string | null,
      creator: string | null,
      merkleTreeCid: null,
      campaignInfoCid: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string],
      {
        distributionId: BigNumber;
        token: string;
        creator: string;
        merkleTreeCid: string;
        campaignInfoCid: string;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    UpdateDistributorInfo(
      cid: null
    ): TypedEventFilter<[string], { cid: string }>;
  };

  estimateGas: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createCampaign(
      merkleRoot: BytesLike,
      token: string,
      merkleTreeCid: string,
      campaignInfoCid: string,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createCampaign(bytes32,address,string,string,uint256)"(
      merkleRoot: BytesLike,
      token: string,
      merkleTreeCid: string,
      campaignInfoCid: string,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateDistributorInfo(
      distributorInfoCid: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateDistributorInfo(string)"(
      distributorInfoCid: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createCampaign(
      merkleRoot: BytesLike,
      token: string,
      merkleTreeCid: string,
      campaignInfoCid: string,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createCampaign(bytes32,address,string,string,uint256)"(
      merkleRoot: BytesLike,
      token: string,
      merkleTreeCid: string,
      campaignInfoCid: string,
      allowance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateDistributorInfo(
      distributorInfoCid: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateDistributorInfo(string)"(
      distributorInfoCid: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
